// Code generated by counterfeiter. DO NOT EDIT.
package pluginfakes

import (
	"sync"

	"code.cloudfoundry.org/cpu-entitlement-admin-plugin/plugin"
	"code.cloudfoundry.org/cpu-entitlement-admin-plugin/reporter"
)

type FakeReporter struct {
	OverEntitlementInstancesStub        func() (reporter.Report, error)
	overEntitlementInstancesMutex       sync.RWMutex
	overEntitlementInstancesArgsForCall []struct {
	}
	overEntitlementInstancesReturns struct {
		result1 reporter.Report
		result2 error
	}
	overEntitlementInstancesReturnsOnCall map[int]struct {
		result1 reporter.Report
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeReporter) OverEntitlementInstances() (reporter.Report, error) {
	fake.overEntitlementInstancesMutex.Lock()
	ret, specificReturn := fake.overEntitlementInstancesReturnsOnCall[len(fake.overEntitlementInstancesArgsForCall)]
	fake.overEntitlementInstancesArgsForCall = append(fake.overEntitlementInstancesArgsForCall, struct {
	}{})
	stub := fake.OverEntitlementInstancesStub
	fakeReturns := fake.overEntitlementInstancesReturns
	fake.recordInvocation("OverEntitlementInstances", []interface{}{})
	fake.overEntitlementInstancesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeReporter) OverEntitlementInstancesCallCount() int {
	fake.overEntitlementInstancesMutex.RLock()
	defer fake.overEntitlementInstancesMutex.RUnlock()
	return len(fake.overEntitlementInstancesArgsForCall)
}

func (fake *FakeReporter) OverEntitlementInstancesCalls(stub func() (reporter.Report, error)) {
	fake.overEntitlementInstancesMutex.Lock()
	defer fake.overEntitlementInstancesMutex.Unlock()
	fake.OverEntitlementInstancesStub = stub
}

func (fake *FakeReporter) OverEntitlementInstancesReturns(result1 reporter.Report, result2 error) {
	fake.overEntitlementInstancesMutex.Lock()
	defer fake.overEntitlementInstancesMutex.Unlock()
	fake.OverEntitlementInstancesStub = nil
	fake.overEntitlementInstancesReturns = struct {
		result1 reporter.Report
		result2 error
	}{result1, result2}
}

func (fake *FakeReporter) OverEntitlementInstancesReturnsOnCall(i int, result1 reporter.Report, result2 error) {
	fake.overEntitlementInstancesMutex.Lock()
	defer fake.overEntitlementInstancesMutex.Unlock()
	fake.OverEntitlementInstancesStub = nil
	if fake.overEntitlementInstancesReturnsOnCall == nil {
		fake.overEntitlementInstancesReturnsOnCall = make(map[int]struct {
			result1 reporter.Report
			result2 error
		})
	}
	fake.overEntitlementInstancesReturnsOnCall[i] = struct {
		result1 reporter.Report
		result2 error
	}{result1, result2}
}

func (fake *FakeReporter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.overEntitlementInstancesMutex.RLock()
	defer fake.overEntitlementInstancesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeReporter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ plugin.Reporter = new(FakeReporter)
