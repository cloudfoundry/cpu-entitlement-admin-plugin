// Code generated by counterfeiter. DO NOT EDIT.
package reporterfakes

import (
	"sync"

	"code.cloudfoundry.org/cpu-entitlement-admin-plugin/reporter"
)

type FakeMetricsFetcher struct {
	FetchInstanceEntitlementUsagesStub        func(string) ([]float64, error)
	fetchInstanceEntitlementUsagesMutex       sync.RWMutex
	fetchInstanceEntitlementUsagesArgsForCall []struct {
		arg1 string
	}
	fetchInstanceEntitlementUsagesReturns struct {
		result1 []float64
		result2 error
	}
	fetchInstanceEntitlementUsagesReturnsOnCall map[int]struct {
		result1 []float64
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMetricsFetcher) FetchInstanceEntitlementUsages(arg1 string) ([]float64, error) {
	fake.fetchInstanceEntitlementUsagesMutex.Lock()
	ret, specificReturn := fake.fetchInstanceEntitlementUsagesReturnsOnCall[len(fake.fetchInstanceEntitlementUsagesArgsForCall)]
	fake.fetchInstanceEntitlementUsagesArgsForCall = append(fake.fetchInstanceEntitlementUsagesArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.FetchInstanceEntitlementUsagesStub
	fakeReturns := fake.fetchInstanceEntitlementUsagesReturns
	fake.recordInvocation("FetchInstanceEntitlementUsages", []interface{}{arg1})
	fake.fetchInstanceEntitlementUsagesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMetricsFetcher) FetchInstanceEntitlementUsagesCallCount() int {
	fake.fetchInstanceEntitlementUsagesMutex.RLock()
	defer fake.fetchInstanceEntitlementUsagesMutex.RUnlock()
	return len(fake.fetchInstanceEntitlementUsagesArgsForCall)
}

func (fake *FakeMetricsFetcher) FetchInstanceEntitlementUsagesCalls(stub func(string) ([]float64, error)) {
	fake.fetchInstanceEntitlementUsagesMutex.Lock()
	defer fake.fetchInstanceEntitlementUsagesMutex.Unlock()
	fake.FetchInstanceEntitlementUsagesStub = stub
}

func (fake *FakeMetricsFetcher) FetchInstanceEntitlementUsagesArgsForCall(i int) string {
	fake.fetchInstanceEntitlementUsagesMutex.RLock()
	defer fake.fetchInstanceEntitlementUsagesMutex.RUnlock()
	argsForCall := fake.fetchInstanceEntitlementUsagesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMetricsFetcher) FetchInstanceEntitlementUsagesReturns(result1 []float64, result2 error) {
	fake.fetchInstanceEntitlementUsagesMutex.Lock()
	defer fake.fetchInstanceEntitlementUsagesMutex.Unlock()
	fake.FetchInstanceEntitlementUsagesStub = nil
	fake.fetchInstanceEntitlementUsagesReturns = struct {
		result1 []float64
		result2 error
	}{result1, result2}
}

func (fake *FakeMetricsFetcher) FetchInstanceEntitlementUsagesReturnsOnCall(i int, result1 []float64, result2 error) {
	fake.fetchInstanceEntitlementUsagesMutex.Lock()
	defer fake.fetchInstanceEntitlementUsagesMutex.Unlock()
	fake.FetchInstanceEntitlementUsagesStub = nil
	if fake.fetchInstanceEntitlementUsagesReturnsOnCall == nil {
		fake.fetchInstanceEntitlementUsagesReturnsOnCall = make(map[int]struct {
			result1 []float64
			result2 error
		})
	}
	fake.fetchInstanceEntitlementUsagesReturnsOnCall[i] = struct {
		result1 []float64
		result2 error
	}{result1, result2}
}

func (fake *FakeMetricsFetcher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fetchInstanceEntitlementUsagesMutex.RLock()
	defer fake.fetchInstanceEntitlementUsagesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMetricsFetcher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ reporter.MetricsFetcher = new(FakeMetricsFetcher)
