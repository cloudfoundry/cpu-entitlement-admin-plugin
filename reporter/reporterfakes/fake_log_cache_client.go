// Code generated by counterfeiter. DO NOT EDIT.
package reporterfakes

import (
	"context"
	"sync"

	"code.cloudfoundry.org/cpu-entitlement-admin-plugin/reporter"
	"code.cloudfoundry.org/log-cache/pkg/client"
	"code.cloudfoundry.org/log-cache/pkg/rpc/logcache_v1"
)

type FakeLogCacheClient struct {
	PromQLStub        func(context.Context, string, ...client.PromQLOption) (*logcache_v1.PromQL_InstantQueryResult, error)
	promQLMutex       sync.RWMutex
	promQLArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []client.PromQLOption
	}
	promQLReturns struct {
		result1 *logcache_v1.PromQL_InstantQueryResult
		result2 error
	}
	promQLReturnsOnCall map[int]struct {
		result1 *logcache_v1.PromQL_InstantQueryResult
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLogCacheClient) PromQL(arg1 context.Context, arg2 string, arg3 ...client.PromQLOption) (*logcache_v1.PromQL_InstantQueryResult, error) {
	fake.promQLMutex.Lock()
	ret, specificReturn := fake.promQLReturnsOnCall[len(fake.promQLArgsForCall)]
	fake.promQLArgsForCall = append(fake.promQLArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []client.PromQLOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("PromQL", []interface{}{arg1, arg2, arg3})
	fake.promQLMutex.Unlock()
	if fake.PromQLStub != nil {
		return fake.PromQLStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.promQLReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeLogCacheClient) PromQLCallCount() int {
	fake.promQLMutex.RLock()
	defer fake.promQLMutex.RUnlock()
	return len(fake.promQLArgsForCall)
}

func (fake *FakeLogCacheClient) PromQLCalls(stub func(context.Context, string, ...client.PromQLOption) (*logcache_v1.PromQL_InstantQueryResult, error)) {
	fake.promQLMutex.Lock()
	defer fake.promQLMutex.Unlock()
	fake.PromQLStub = stub
}

func (fake *FakeLogCacheClient) PromQLArgsForCall(i int) (context.Context, string, []client.PromQLOption) {
	fake.promQLMutex.RLock()
	defer fake.promQLMutex.RUnlock()
	argsForCall := fake.promQLArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeLogCacheClient) PromQLReturns(result1 *logcache_v1.PromQL_InstantQueryResult, result2 error) {
	fake.promQLMutex.Lock()
	defer fake.promQLMutex.Unlock()
	fake.PromQLStub = nil
	fake.promQLReturns = struct {
		result1 *logcache_v1.PromQL_InstantQueryResult
		result2 error
	}{result1, result2}
}

func (fake *FakeLogCacheClient) PromQLReturnsOnCall(i int, result1 *logcache_v1.PromQL_InstantQueryResult, result2 error) {
	fake.promQLMutex.Lock()
	defer fake.promQLMutex.Unlock()
	fake.PromQLStub = nil
	if fake.promQLReturnsOnCall == nil {
		fake.promQLReturnsOnCall = make(map[int]struct {
			result1 *logcache_v1.PromQL_InstantQueryResult
			result2 error
		})
	}
	fake.promQLReturnsOnCall[i] = struct {
		result1 *logcache_v1.PromQL_InstantQueryResult
		result2 error
	}{result1, result2}
}

func (fake *FakeLogCacheClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.promQLMutex.RLock()
	defer fake.promQLMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeLogCacheClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ reporter.LogCacheClient = new(FakeLogCacheClient)
